library(lubridate)
library(ggplot2)   # use at least 0.9.3 for theme_minimal()
gap1 = read.csv("VA_2011-2012.csv",na.strings=c("NA"," - "),header=F)
gap2 = read.csv("VA_2012-2013.csv",na.strings=c("NA"," - "),header=F)
gap3 = read.csv("VA_2013-2014.csv",na.strings=c("NA"," - "),header=F)
w1E = read.csv("IN_2011-2012 (Entrance).csv",na.strings=c("NA"," - "),header=F)
w2E = read.csv("IN_2012-2013 (Entrance).csv",na.strings=c("NA"," - "),header=F)
w3E = read.csv("IN_2013-2014 (Entrance).csv",na.strings=c("NA"," - "),header=F)
w3H = read.csv("IN_2013-2014 (Deeper).csv",na.strings=c("NA"," - "),header=F)
data<-gap1
data_name <-'gap1'
par(mfrow=c(1,1))
main_fun<- ifelse(data_name == 'gap1',expression(paste('Gap Cave, VA, 2011-2012 ',italic('(M. lucifugus)'))),
ifelse(data_name == 'gap2',expression(paste('Gap Cave, VA, 2012-2013 ',italic('(M. lucifugus)'))),
ifelse(data_name == 'gap3',expression(paste('Gap Cave, VA, 2013-2014 ',italic('(M. lucifugus)'))),
ifelse(data_name == 'w1E',expression(paste('Wyandotte Cave, IN, 2011-2012 ',italic('(M. sodalis)'))),
ifelse(data_name == 'w2E',expression(paste('Wyandotte Cave, IN, 2012-2013 ',italic('(M. sodalis)'))),
ifelse(data_name == 'w3E',expression(paste('Wyandotte Cave, IN, 2013-2014 ',italic('(M. sodalis)'))),
ifelse(data_name == 'w3H',expression(paste('Wyandotte Cave, IN, 2013-2014 (Deeper) ',italic('(M. sodalis)'))),
"NA")))))))
axis_fun_1<- ifelse(data_name == 'gap1',ax_1<-seq(from=0,to=max(gap1),by=10),
ifelse(data_name == 'gap2',ax_1<-seq(from=0,to=max(gap2),by=10),
ifelse(data_name == 'gap3',ax_1<-seq(from=0,to=max(gap3),by=10),
ifelse(data_name == 'w1E',ax_1<-seq(from=0,to=max(w1E),by=10),
ifelse(data_name == 'w2E',ax_1<-seq(from=0,to=max(w2E),by=10),
ifelse(data_name == 'w3E',ax_1<-seq(from=0,to=max(w3E),by=10),
ifelse(data_name == 'w3H',ax_1<-seq(from=0,to=max(w3H),by=10),
"NA")))))))
axis_fun_2<- ifelse(data_name == 'gap1',ax_2<-seq(from=0,to=max(gap1),by=10),
ifelse(data_name == 'gap2',ax_2<-seq(from=0,to=max(gap2),by=10),
ifelse(data_name == 'gap3',ax_2<-seq(from=0,to=max(gap3),by=10),
ifelse(data_name == 'w1E',ax_2<-seq(from=0,to=max(w1E),by=10),
ifelse(data_name == 'w2E',ax_2<-seq(from=0,to=max(w2E),by=10),
ifelse(data_name == 'w3E',ax_2<-seq(from=0,to=max(w3E),by=10),
ifelse(data_name == 'w3H',ax_2<-seq(from=0,to=max(w3H),by=10),
"NA")))))))
u95ci<-rowMeans((t(data)))+rowSds((t(data)))/sqrt(length((t(data))[1,]))
l95ci<-rowMeans((t(data)))-rowSds((t(data)))/sqrt(length((t(data))[1,]))
cis<-cbind(u95ci,l95ci)
lims<-range(cis[!is.na(cis)&is.finite(cis)])
plot(rowMeans((t(data))),type="l",ylim=c(min(lims),max(lims)),
main=main_fun,xlab="hours",ylab="Mean # saturated pixels",axes=F)
lines(u95ci,col="grey")
lines(l95ci,col="grey")
axis(at=ax_1,labels=ax_1,side=2)
box()
axis(at=seq(from=0,to=288,by=288/24),labels=seq(from=0,to=24,by=1),side=1)
legend("topright",c("mean","95% confidence intervals"),lty=1,col=c("black","grey"),bty="n")
mtext("hours",side=1,line=3)
hrs11<-rep(seq(from=1,to=24,by=2),12)
hrs12<-rep(seq(from=0,to=23,by=2),12)
hrs<-c(hrs11,hrs12)
data_rose<-as.data.frame(t(data))
data_rose$rs<-rowSums(data_rose)
data_rose$hrs<-sort(hrs)
data_rose_r<-aggregate(data_rose$rs, by=list(data_rose$hrs), FUN=sum)[2]
data_rose_r$hr<-1:24
data_rose_r_plot<-as.data.frame(rep(1:24,times=c(data_rose_r$x)))
colnames(data_rose_r_plot)<-'x'
ggplot(data_rose_r_plot, aes(x = x)) + geom_histogram(breaks = seq(0,24), colour = "grey") + coord_polar(start = 0) + theme_minimal() +
scale_fill_brewer() + ylab("Pixel count") + ggtitle(c(main_fun)) +
scale_x_continuous("", limits = c(0, 24), breaks = seq(0, 24), labels = seq(0, 24))
st_fun <- ifelse(data_name == 'gap1',start<-c('2011-11-18 00:00:00'),
ifelse(data_name == 'gap2',start<-c('2012-12-04 00:00:00'),
ifelse(data_name == 'gap3',start<-c('2014-02-04 00:00:00'),
ifelse(data_name == 'w1E',start<-c('2012-01-26 00:00:00'),
ifelse(data_name == 'w2E',start<-c('2012-11-20 00:00:00'),
ifelse(data_name == 'w3E',start<-c('2013-11-28 00:00:00'),
ifelse(data_name == 'w3H',start<-c('2013-11-28 00:00:00'))))))))
data<-as.vector(as.matrix(t(data)))
df <- data.frame(interval = seq(ymd_hms(start),
by = '5 min',length.out=length(data)),
data = data)
ts <- xts(df$data, order.by=df$interval)
plot(ts,
#xlim=as.POSIXct(c('2012-01-26 00:00:00','2012-04-26 00:00:00')), # to set axes limits
main=main_fun,major.ticks="weeks", major.format="%b %d")
mor_data<-morlet(sqrt(data), x1 = seq_along(data), p2 = NULL, dj = 0.25, siglvl = 0.95)
source("wavelet_plot_dh.R")
wavelet.plot.dh(mor_data,crn.lab="Pixel",x.lab="Time")
main_fun
wavelet.plot.dh<-
function (wave.list, wavelet.levels = quantile(wave.list$Power,
probs = (0:10)/10), add.coi = TRUE, add.sig = TRUE, x.lab = gettext("Time"),
period.lab = gettext("Period"), crn.lab = gettext("RWI"),
key.cols = rev(rainbow(length(wavelet.levels) - 1)), key.lab = parse(text = paste0("\"",
gettext("Power"), "\"^2")), add.spline = FALSE, f = 0.5,
nyrs = NULL, crn.col = "black", crn.lwd = 1, coi.col = "black",
crn.ylim = range(wave.list$y) * c(0.95, 1.05), side.by.side = FALSE,
useRaster = FALSE, res = 150, reverse.y = FALSE, ...)
{
y <- wave.list$y
x <- wave.list$x
period <- wave.list$period
Signif <- wave.list$Signif
coi <- wave.list$coi
Power <- wave.list$Power
siglvl <- wave.list$siglvl
stopifnot(is.numeric(x), is.numeric(y), is.numeric(period),
is.numeric(Signif), is.numeric(coi), is.numeric(Power),
is.numeric(siglvl), is.logical(useRaster), length(useRaster) ==
1, identical(side.by.side, TRUE) || identical(side.by.side,
FALSE))
stopifnot(is.numeric(wavelet.levels))
n.x <- length(x)
n.period <- length(period)
dim.Power <- dim(Power)
stopifnot(length(dim.Power) == 2, n.x == length(y), dim.Power[1] ==
n.x, dim.Power[2] == n.period, length(Signif) == n.period,
length(coi) == n.x, length(siglvl) == 1, n.x >= 2, n.period >=
2)
if (any(diff(x) <= 0) || any(diff(period) <= 0)) {
stop("'wave.list$x' and 'wave.list$period' must be strictly ascending")
}
if (period[1] <= 0) {
stop("'wave.list$period' must be positive")
}
coi[coi == 0] <- 1e-12
Signif <- t(matrix(Signif, dim.Power[2], dim.Power[1]))
Signif <- Power/Signif
period2 <- log2(period)
ytick <- unique(trunc(period2))
ytickv <- 2^ytick
coi2 <- log2(coi)
coi2[coi2 < 0] <- 0
coi2.yy <- c(coi2, rep(max(period2, na.rm = TRUE), n.x))
coi2.yy[is.na(coi2.yy)] <- coi[2]
yr.vec.xx <- c(x, rev(x))
par.orig <- par(c("mar", "las", "mfrow", "mgp", "tcl"))
on.exit(par(par.orig))
nlevels <- length(wavelet.levels)
seq.level <- seq_len(nlevels - 1)
key.labs <- formatC(wavelet.levels, digits = 4, format = "f")
asp <- NA
xaxs <- "i"
yaxs <- "i"
las <- 1
xlim <- range(x, finite = TRUE)
ylim <- range(period2, finite = TRUE)
if (isTRUE(reverse.y)) {
ylim <- rev(ylim)
}
if (side.by.side) {
layout(matrix(c(3, 2, 1), nrow = 1, byrow = TRUE), widths = c(1,
1, 0.2))
scale.xlim <- c(0, 1)
scale.ylim <- c(1, nlevels)
scale.side <- 4
scale.xleft <- 0
scale.ybottom <- seq.level
scale.xright <- 1
scale.ytop <- 2:nlevels
mar1 <- c(3, 1, 3, 3)
mar2 <- c(3, 3, 3, 3)
mar3 <- c(3, 3, 3, 3)
}
else {
layout(matrix(c(3, 2, 1), ncol = 1, byrow = TRUE), heights = c(1,
1, 0.3))
scale.xlim <- c(1, nlevels)
scale.ylim <- c(0, 1)
scale.side <- 1
scale.xleft <- seq.level
scale.ybottom <- 0
scale.xright <- 2:nlevels
scale.ytop <- 1
mar1 <- c(3, 3, 0.1, 3)
mar2 <- mar1
mar3 <- c(0.1, 3, 3, 3)
}
par(mar = mar1, tcl = 0.5, mgp = c(1.5, 0.25, 0), las = las)
dev.hold()
on.exit(dev.flush(), add = TRUE)
plot.new()
plot.window(ylim = scale.ylim, xlim = scale.xlim, xaxs = xaxs,
yaxs = yaxs, asp = asp)
rect(scale.xleft, scale.ybottom, scale.xright, scale.ytop,
col = key.cols)
axis(scale.side, at = seq_along(wavelet.levels), labels = key.labs)
if (side.by.side) {
title(key.lab, cex.main = 1)
}
else {
title(sub = key.lab, cex.sub = 1, line = 1.5)
}
par(mar = mar2, tcl = 0.5, mgp = c(1.5, 0.25, 0))
plot.new()
plot.window(xlim, ylim, "", xaxs = xaxs, yaxs = yaxs, asp = asp,
las = las)
if (is.na(useRaster)) {
useRaster2 <- names(dev.cur()) %in% c("pdf", "postscript")
}
else {
useRaster2 <- useRaster
}
cl <- quote(.filled.contour(as.double(x), as.double(period2),
Power, as.double(wavelet.levels), key.cols))
if (useRaster2) {
args <- list(...)
argNames <- names(args)
if (is.null(argNames)) {
args <- NULL
}
else {
args <- args[!is.na(argNames) & nzchar(argNames)]
}
if (length(args) == 0L) {
Call <- as.call(c(as.name("rasterPlot"), alist(expr = cl,
res = res, antialias = "none", interpolate = FALSE)))
}
else {
Call <- as.call(c(as.name("rasterPlot"), args))
Call <- as.list(match.call(rasterPlot, Call))
anam <- names(Call[-1L])
Call[["expr"]] <- quote(cl)
Call[["res"]] <- quote(res)
Call[["region"]] <- "plot"
Call[["draw"]] <- TRUE
if (!("antialias" %in% anam)) {
Call[["antialias"]] <- "none"
}
if (!("interpolate" %in% anam)) {
Call[["interpolate"]] <- FALSE
}
Call <- as.call(Call)
}
tryCatch(eval(Call), error = function(e) {
message(as.character(e), appendLF = FALSE)
message("reverting to useRaster=FALSE")
eval(cl)
})
}
else {
eval(cl)
}
if (isTRUE(add.sig)) {
contour(x, period2, Signif, levels = 1, labels = siglvl,
drawlabels = FALSE, axes = FALSE, frame.plot = FALSE,
add = TRUE, lwd = 2, col = "black")
}
if (isTRUE(add.coi)) {
polygon(yr.vec.xx, coi2.yy, density = c(10, 20), angle = c(-45,
45), col = coi.col)
}
axis(1)
axis(2, at = ytick, labels = ytickv)
if (side.by.side) {
axis(3, at = seq(from = 0, to = length(mor_data$x), by = length(mor_data$x)/5), labels = seq(from = as.Date(st_fun), by = "month", length.out = 6),cex.axis=1)
axis(4, at = ytick, labels = ytickv)
}
else {
axis(3, labels = NA) #
axis(4, at = ytick, labels = NA)
}
title(xlab = x.lab, ylab = period.lab)
box()
par(mar = mar3, las = 0)
plot(x, y, type = "l", xlim, xaxs = xaxs, yaxs = yaxs, asp = asp,
xlab = "", ylab = "", axes = FALSE, col = crn.col, lwd = crn.lwd,
ylim = crn.ylim, main = main_fun)
if (add.spline) {
spl <- y
tmp <- na.omit(spl)
if (is.null(nyrs)) {
nyrs2 <- length(tmp) * 0.33
}
else {
nyrs2 <- nyrs
}
tmp <- ffcsaps(y = tmp, x = seq_along(tmp), nyrs = nyrs2,
f = f)
spl[!is.na(spl)] <- tmp
lines(x, spl, col = "red", lwd = 2)
}
axis(3, at = seq(from = 0, to = length(mor_data$x), by = length(mor_data$x)/5), labels = seq(from = as.Date(st_fun), by = "month", length.out = 6),cex.axis=1)
axis(4)
if (side.by.side) {
axis(1)
axis(2)
title(xlab = x.lab, ylab = crn.lab)
}
else {
axis(1, labels = NA)
axis(2, labels = NA)
mtext(crn.lab, side = 4, line = 1.5, cex = 0.75)
}
box()
invisible()
}
wavelet.plot.dh(mor_data,crn.lab="Pixel",x.lab="Time")
pdf(file = paste(data_name,"_morlet.pdf",sep=''))
wavelet.plot.dh(mor_data,crn.lab="Pixel",x.lab="Time")
dev.off()
wavelet.plot.dh<-
function (wave.list, wavelet.levels = quantile(wave.list$Power,
probs = (0:10)/10), add.coi = TRUE, add.sig = TRUE, x.lab = gettext("Time"),
period.lab = gettext("Period"), crn.lab = gettext("RWI"),
key.cols = rev(rainbow(length(wavelet.levels) - 1)), key.lab = parse(text = paste0("\"",
gettext("Power"), "\"^2")), add.spline = FALSE, f = 0.5,
nyrs = NULL, crn.col = "black", crn.lwd = 1, coi.col = "black",
crn.ylim = range(wave.list$y) * c(0.95, 1.05), side.by.side = FALSE,
useRaster = FALSE, res = 150, reverse.y = FALSE, ...)
{
y <- wave.list$y
x <- wave.list$x
period <- wave.list$period
Signif <- wave.list$Signif
coi <- wave.list$coi
Power <- wave.list$Power
siglvl <- wave.list$siglvl
stopifnot(is.numeric(x), is.numeric(y), is.numeric(period),
is.numeric(Signif), is.numeric(coi), is.numeric(Power),
is.numeric(siglvl), is.logical(useRaster), length(useRaster) ==
1, identical(side.by.side, TRUE) || identical(side.by.side,
FALSE))
stopifnot(is.numeric(wavelet.levels))
n.x <- length(x)
n.period <- length(period)
dim.Power <- dim(Power)
stopifnot(length(dim.Power) == 2, n.x == length(y), dim.Power[1] ==
n.x, dim.Power[2] == n.period, length(Signif) == n.period,
length(coi) == n.x, length(siglvl) == 1, n.x >= 2, n.period >=
2)
if (any(diff(x) <= 0) || any(diff(period) <= 0)) {
stop("'wave.list$x' and 'wave.list$period' must be strictly ascending")
}
if (period[1] <= 0) {
stop("'wave.list$period' must be positive")
}
coi[coi == 0] <- 1e-12
Signif <- t(matrix(Signif, dim.Power[2], dim.Power[1]))
Signif <- Power/Signif
period2 <- log2(period)
ytick <- unique(trunc(period2))
ytickv <- 2^ytick
coi2 <- log2(coi)
coi2[coi2 < 0] <- 0
coi2.yy <- c(coi2, rep(max(period2, na.rm = TRUE), n.x))
coi2.yy[is.na(coi2.yy)] <- coi[2]
yr.vec.xx <- c(x, rev(x))
par.orig <- par(c("mar", "las", "mfrow", "mgp", "tcl"))
on.exit(par(par.orig))
nlevels <- length(wavelet.levels)
seq.level <- seq_len(nlevels - 1)
key.labs <- formatC(wavelet.levels, digits = 4, format = "f")
asp <- NA
xaxs <- "i"
yaxs <- "i"
las <- 1
xlim <- range(x, finite = TRUE)
ylim <- range(period2, finite = TRUE)
if (isTRUE(reverse.y)) {
ylim <- rev(ylim)
}
if (side.by.side) {
layout(matrix(c(3, 2, 1), nrow = 1, byrow = TRUE), widths = c(1,
1, 0.2))
scale.xlim <- c(0, 1)
scale.ylim <- c(1, nlevels)
scale.side <- 4
scale.xleft <- 0
scale.ybottom <- seq.level
scale.xright <- 1
scale.ytop <- 2:nlevels
mar1 <- c(3, 1, 3, 3)
mar2 <- c(3, 3, 3, 3)
mar3 <- c(3, 3, 3, 3)
}
else {
layout(matrix(c(3, 2, 1), ncol = 1, byrow = TRUE), heights = c(1,
1, 0.3))
scale.xlim <- c(1, nlevels)
scale.ylim <- c(0, 1)
scale.side <- 1
scale.xleft <- seq.level
scale.ybottom <- 0
scale.xright <- 2:nlevels
scale.ytop <- 1
mar1 <- c(3, 3, 0.1, 3)
mar2 <- mar1
mar3 <- c(0.1, 3, 4, 3)
}
par(mar = mar1, tcl = 0.5, mgp = c(1.5, 0.25, 0), las = las)
dev.hold()
on.exit(dev.flush(), add = TRUE)
plot.new()
plot.window(ylim = scale.ylim, xlim = scale.xlim, xaxs = xaxs,
yaxs = yaxs, asp = asp)
rect(scale.xleft, scale.ybottom, scale.xright, scale.ytop,
col = key.cols)
axis(scale.side, at = seq_along(wavelet.levels), labels = key.labs)
if (side.by.side) {
title(key.lab, cex.main = 1)
}
else {
title(sub = key.lab, cex.sub = 1, line = 1.5)
}
par(mar = mar2, tcl = 0.5, mgp = c(1.5, 0.25, 0))
plot.new()
plot.window(xlim, ylim, "", xaxs = xaxs, yaxs = yaxs, asp = asp,
las = las)
if (is.na(useRaster)) {
useRaster2 <- names(dev.cur()) %in% c("pdf", "postscript")
}
else {
useRaster2 <- useRaster
}
cl <- quote(.filled.contour(as.double(x), as.double(period2),
Power, as.double(wavelet.levels), key.cols))
if (useRaster2) {
args <- list(...)
argNames <- names(args)
if (is.null(argNames)) {
args <- NULL
}
else {
args <- args[!is.na(argNames) & nzchar(argNames)]
}
if (length(args) == 0L) {
Call <- as.call(c(as.name("rasterPlot"), alist(expr = cl,
res = res, antialias = "none", interpolate = FALSE)))
}
else {
Call <- as.call(c(as.name("rasterPlot"), args))
Call <- as.list(match.call(rasterPlot, Call))
anam <- names(Call[-1L])
Call[["expr"]] <- quote(cl)
Call[["res"]] <- quote(res)
Call[["region"]] <- "plot"
Call[["draw"]] <- TRUE
if (!("antialias" %in% anam)) {
Call[["antialias"]] <- "none"
}
if (!("interpolate" %in% anam)) {
Call[["interpolate"]] <- FALSE
}
Call <- as.call(Call)
}
tryCatch(eval(Call), error = function(e) {
message(as.character(e), appendLF = FALSE)
message("reverting to useRaster=FALSE")
eval(cl)
})
}
else {
eval(cl)
}
if (isTRUE(add.sig)) {
contour(x, period2, Signif, levels = 1, labels = siglvl,
drawlabels = FALSE, axes = FALSE, frame.plot = FALSE,
add = TRUE, lwd = 2, col = "black")
}
if (isTRUE(add.coi)) {
polygon(yr.vec.xx, coi2.yy, density = c(10, 20), angle = c(-45,
45), col = coi.col)
}
axis(1)
axis(2, at = ytick, labels = ytickv)
if (side.by.side) {
axis(3, at = seq(from = 0, to = length(mor_data$x), by = length(mor_data$x)/5), labels = seq(from = as.Date(st_fun), by = "month", length.out = 6),cex.axis=1)
axis(4, at = ytick, labels = ytickv)
}
else {
axis(3, labels = NA) #
axis(4, at = ytick, labels = NA)
}
title(xlab = x.lab, ylab = period.lab)
box()
par(mar = mar3, las = 0)
plot(x, y, type = "l", xlim, xaxs = xaxs, yaxs = yaxs, asp = asp,
xlab = "", ylab = "", axes = FALSE, col = crn.col, lwd = crn.lwd,
ylim = crn.ylim, main = main_fun)
if (add.spline) {
spl <- y
tmp <- na.omit(spl)
if (is.null(nyrs)) {
nyrs2 <- length(tmp) * 0.33
}
else {
nyrs2 <- nyrs
}
tmp <- ffcsaps(y = tmp, x = seq_along(tmp), nyrs = nyrs2,
f = f)
spl[!is.na(spl)] <- tmp
lines(x, spl, col = "red", lwd = 2)
}
axis(3, at = seq(from = 0, to = length(mor_data$x), by = length(mor_data$x)/5), labels = seq(from = as.Date(st_fun), by = "month", length.out = 6),cex.axis=1)
axis(4)
if (side.by.side) {
axis(1)
axis(2)
title(xlab = x.lab, ylab = crn.lab)
}
else {
axis(1, labels = NA)
axis(2, labels = NA)
mtext(crn.lab, side = 4, line = 1.5, cex = 0.75)
}
box()
invisible()
}
pdf(file = paste(data_name,"_morlet.pdf",sep=''))
wavelet.plot.dh(mor_data,crn.lab="Pixel",x.lab="Time")
dev.off()
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
data_name
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
source('~/GitHub/cave_data/R_code_files/cave_timesseries_analyses.R', echo=TRUE)
